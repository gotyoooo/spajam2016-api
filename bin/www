#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('spajam2016-api:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Socket
 */

var user = {};
var io = require('socket.io')(server);
io.on('connection', function(socket){
    socket.on("connected", function (name) {
        user[socket.id] = name;
        console.log(name);
    }); 
    // show chat message
    socket.on('chat message', function(msg){
        console.log(msg);
        io.emit('chat message', msg);

        var request = require('request')
        var line_conf = require('../routes/line_conf.json')
        var fixie_conf = require('../routes/fixie_conf.json')

        var proxy = request.defaults(fixie_conf)

        var headers = {
          'Content-Type': 'application/json; charset=UTF-8',
          'X-Line-ChannelID': line_conf['X-Line-ChannelID'],
          'X-Line-ChannelSecret': line_conf['X-Line-ChannelSecret'],
          'X-Line-Trusted-User-With-ACL': line_conf['X-Line-Trusted-User-With-ACL']
        }

        var content = {
          "contentType":1,
          "toType":1,
          "text": msg
        }

        var options = {
          url: 'https://trialbot-api.line.me/v1/events',
          method: 'POST',
          headers: headers,
          json: true,
          body: {
            'to': 'ueb6bb14fecfd1ace526d7d7561b81619',
            'toChannel': 1383378250,
            'eventType': "138311608800106203",
            'content':content
          }
        }
        proxy(options, (err, res, body) => {
          if (err) {
            console.log(err);
          }
        });
    });
    // disconnect socket
    socket.on('disconnect', function(){
        console.log('disconnected');
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
